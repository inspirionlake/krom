
krom004.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000426  000004ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000426  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000049  0080010c  0080010c  000004c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001088  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a25  00000000  00000000  00001680  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000714  00000000  00000000  000020a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  000027bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000814  00000000  00000000  000029d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000060d  00000000  00000000  000031ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000037f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__vector_14>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 37 01 	jmp	0x26e	; 0x26e <__vector_18>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	91 01       	movw	r18, r2

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e6 e2       	ldi	r30, 0x26	; 38
  7e:	f4 e0       	ldi	r31, 0x04	; 4
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	ac 30       	cpi	r26, 0x0C	; 12
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	ac e0       	ldi	r26, 0x0C	; 12
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a5 35       	cpi	r26, 0x55	; 85
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 0b 02 	call	0x416	; 0x416 <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <main>
  b6:	0c 94 11 02 	jmp	0x422	; 0x422 <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_Z9timerInitv>:
Axis axis_x(X, 0, 0, 10, 32, 0.00155);	//	uint8_t name, uint8_t en, uint8_t dir, uint16_t step, uint8_t microstep, value_of_division
Axis axis_y(Y, 0, 0, 10, 32, 0.00155);	//	uint8_t name, uint8_t en, uint8_t dir, uint16_t step, uint8_t microstep
Axis axis_z(Z, 0, 0, 10, 32, 0.00155);	//	uint8_t name, uint8_t en, uint8_t dir, uint16_t step, uint8_t microstep

void timerInit(void) {			//	timer for postprocessor refresh
	TCCR0A = 0;					//	normal port operations
  be:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= (1<<WGM01);		//	CTC mode
  c0:	84 b5       	in	r24, 0x24	; 36
  c2:	82 60       	ori	r24, 0x02	; 2
  c4:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS01);		//	prescaller set as 8
  c6:	85 b5       	in	r24, 0x25	; 37
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1<<OCIE0A);
  cc:	ee e6       	ldi	r30, 0x6E	; 110
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	82 60       	ori	r24, 0x02	; 2
  d4:	80 83       	st	Z, r24
	OCR0A = 73;					//	freq = 16MHz/(2*8*(1+73)) = 13.5kHz
  d6:	89 e4       	ldi	r24, 0x49	; 73
  d8:	87 bd       	out	0x27, r24	; 39
	sei();
  da:	78 94       	sei
  dc:	08 95       	ret

000000de <_Z9portsInitv>:
}

void portsInit(void) {
	DDRD |= (1<<X_ENA_D);
  de:	55 9a       	sbi	0x0a, 5	; 10
	DDRB |= (1<<X_DIR_D);
  e0:	20 9a       	sbi	0x04, 0	; 4
	DDRD |= (1<<X_PUL_D);
  e2:	52 9a       	sbi	0x0a, 2	; 10
	
	DDRD |= (1<<Y_ENA_D);
  e4:	56 9a       	sbi	0x0a, 6	; 10
	DDRB |= (1<<Y_DIR_D);
  e6:	21 9a       	sbi	0x04, 1	; 4
	DDRD |= (1<<Y_PUL_D);
  e8:	53 9a       	sbi	0x0a, 3	; 10
	
	DDRD |= (1<<Z_ENA_D);
  ea:	57 9a       	sbi	0x0a, 7	; 10
	DDRB |= (1<<Z_DIR_D);
  ec:	22 9a       	sbi	0x04, 2	; 4
	DDRD |= (1<<Z_PUL_D);
  ee:	54 9a       	sbi	0x0a, 4	; 10
	
	DDRB |= (1<<CLK_PUL);
  f0:	24 9a       	sbi	0x04, 4	; 4
	DDRB |= (1<<CLK);
  f2:	23 9a       	sbi	0x04, 3	; 4
	
	//portb4 it is arduino 13 pin with led
	DDRB |= (1<<DDB5); // set as output
  f4:	25 9a       	sbi	0x04, 5	; 4
  f6:	08 95       	ret

000000f8 <_Z5doCLKv>:
}

void doCLK(void) {
	PORTB |= (1<<CLK);
  f8:	2b 9a       	sbi	0x05, 3	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	8a e0       	ldi	r24, 0x0A	; 10
  fc:	8a 95       	dec	r24
  fe:	f1 f7       	brne	.-4      	; 0xfc <_Z5doCLKv+0x4>
 100:	00 c0       	rjmp	.+0      	; 0x102 <_Z5doCLKv+0xa>
	_delay_us(2) ;
	PORTB &= ~(1<<CLK);
 102:	2b 98       	cbi	0x05, 3	; 5
 104:	8a e0       	ldi	r24, 0x0A	; 10
 106:	8a 95       	dec	r24
 108:	f1 f7       	brne	.-4      	; 0x106 <_Z5doCLKv+0xe>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <_Z5doCLKv+0x14>
 10c:	08 95       	ret

0000010e <_Z9doCLK_PULv>:
	_delay_us(2);
}

void doCLK_PUL(void) {
	if (axis_x.step > 0) {
 10e:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <axis_x+0xd>
 112:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <axis_x+0xe>
 116:	a0 91 3d 01 	lds	r26, 0x013D	; 0x80013d <axis_x+0xf>
 11a:	b0 91 3e 01 	lds	r27, 0x013E	; 0x80013e <axis_x+0x10>
 11e:	89 2b       	or	r24, r25
 120:	8a 2b       	or	r24, r26
 122:	8b 2b       	or	r24, r27
 124:	79 f0       	breq	.+30     	; 0x144 <_Z9doCLK_PULv+0x36>
		PORTD |= (1<<X_PUL_D);
 126:	5a 9a       	sbi	0x0b, 2	; 11
		axis_x.step--;
 128:	ee e2       	ldi	r30, 0x2E	; 46
 12a:	f1 e0       	ldi	r31, 0x01	; 1
 12c:	85 85       	ldd	r24, Z+13	; 0x0d
 12e:	96 85       	ldd	r25, Z+14	; 0x0e
 130:	a7 85       	ldd	r26, Z+15	; 0x0f
 132:	b0 89       	ldd	r27, Z+16	; 0x10
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	a1 09       	sbc	r26, r1
 138:	b1 09       	sbc	r27, r1
 13a:	85 87       	std	Z+13, r24	; 0x0d
 13c:	96 87       	std	Z+14, r25	; 0x0e
 13e:	a7 87       	std	Z+15, r26	; 0x0f
 140:	b0 8b       	std	Z+16, r27	; 0x10
 142:	01 c0       	rjmp	.+2      	; 0x146 <_Z9doCLK_PULv+0x38>
	}
	else {
		PORTD &= ~(1<<X_PUL_D);
 144:	5a 98       	cbi	0x0b, 2	; 11
	}
	if (axis_y.step > 0) {
 146:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <axis_y+0xd>
 14a:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <axis_y+0xe>
 14e:	a0 91 2c 01 	lds	r26, 0x012C	; 0x80012c <axis_y+0xf>
 152:	b0 91 2d 01 	lds	r27, 0x012D	; 0x80012d <axis_y+0x10>
 156:	89 2b       	or	r24, r25
 158:	8a 2b       	or	r24, r26
 15a:	8b 2b       	or	r24, r27
 15c:	79 f0       	breq	.+30     	; 0x17c <_Z9doCLK_PULv+0x6e>
		PORTD |= (1<<Y_PUL_D);
 15e:	5b 9a       	sbi	0x0b, 3	; 11
		axis_y.step--;
 160:	ed e1       	ldi	r30, 0x1D	; 29
 162:	f1 e0       	ldi	r31, 0x01	; 1
 164:	85 85       	ldd	r24, Z+13	; 0x0d
 166:	96 85       	ldd	r25, Z+14	; 0x0e
 168:	a7 85       	ldd	r26, Z+15	; 0x0f
 16a:	b0 89       	ldd	r27, Z+16	; 0x10
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	a1 09       	sbc	r26, r1
 170:	b1 09       	sbc	r27, r1
 172:	85 87       	std	Z+13, r24	; 0x0d
 174:	96 87       	std	Z+14, r25	; 0x0e
 176:	a7 87       	std	Z+15, r26	; 0x0f
 178:	b0 8b       	std	Z+16, r27	; 0x10
 17a:	01 c0       	rjmp	.+2      	; 0x17e <_Z9doCLK_PULv+0x70>
	}
	else {
		PORTD &= ~(1<<Y_PUL_D);
 17c:	5b 98       	cbi	0x0b, 3	; 11
	}
	if (axis_z.step > 0) {
 17e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <__data_end+0xd>
 182:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <__data_end+0xe>
 186:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <__data_end+0xf>
 18a:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <__data_end+0x10>
 18e:	89 2b       	or	r24, r25
 190:	8a 2b       	or	r24, r26
 192:	8b 2b       	or	r24, r27
 194:	79 f0       	breq	.+30     	; 0x1b4 <_Z9doCLK_PULv+0xa6>
		PORTD |= (1<<Z_PUL_D);
 196:	5c 9a       	sbi	0x0b, 4	; 11
		axis_z.step--;
 198:	ec e0       	ldi	r30, 0x0C	; 12
 19a:	f1 e0       	ldi	r31, 0x01	; 1
 19c:	85 85       	ldd	r24, Z+13	; 0x0d
 19e:	96 85       	ldd	r25, Z+14	; 0x0e
 1a0:	a7 85       	ldd	r26, Z+15	; 0x0f
 1a2:	b0 89       	ldd	r27, Z+16	; 0x10
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	a1 09       	sbc	r26, r1
 1a8:	b1 09       	sbc	r27, r1
 1aa:	85 87       	std	Z+13, r24	; 0x0d
 1ac:	96 87       	std	Z+14, r25	; 0x0e
 1ae:	a7 87       	std	Z+15, r26	; 0x0f
 1b0:	b0 8b       	std	Z+16, r27	; 0x10
 1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <_Z9doCLK_PULv+0xa8>
	}
	else {
		PORTD &= ~(1<<Z_PUL_D);
 1b4:	5c 98       	cbi	0x0b, 4	; 11
 1b6:	85 e3       	ldi	r24, 0x35	; 53
 1b8:	8a 95       	dec	r24
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <_Z9doCLK_PULv+0xaa>
 1bc:	00 00       	nop
	}
	_delay_us(10);				//	maybe this string can be omitted?
	PORTB ^= (1<<CLK_PUL);
 1be:	95 b1       	in	r25, 0x05	; 5
 1c0:	80 e1       	ldi	r24, 0x10	; 16
 1c2:	89 27       	eor	r24, r25
 1c4:	85 b9       	out	0x05, r24	; 5
 1c6:	08 95       	ret

000001c8 <_Z13refreshOutputv>:
}

void refreshOutput() {
	//ENABLE CONFIG
	if (axis_x.enable) {
 1c8:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <axis_x+0xc>
 1cc:	88 23       	and	r24, r24
 1ce:	11 f0       	breq	.+4      	; 0x1d4 <_Z13refreshOutputv+0xc>
		PORTD |= (1<<X_ENA_D);
 1d0:	5d 9a       	sbi	0x0b, 5	; 11
 1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <_Z13refreshOutputv+0xe>
	}
	else {
		PORTD &= ~(1<<X_ENA_D);
 1d4:	5d 98       	cbi	0x0b, 5	; 11
	}
	if (axis_y.enable) {
 1d6:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <axis_y+0xc>
 1da:	88 23       	and	r24, r24
 1dc:	11 f0       	breq	.+4      	; 0x1e2 <_Z13refreshOutputv+0x1a>
		PORTD |= (1<<Y_ENA_D);
 1de:	5e 9a       	sbi	0x0b, 6	; 11
 1e0:	01 c0       	rjmp	.+2      	; 0x1e4 <_Z13refreshOutputv+0x1c>
	}
	else {
		PORTD &= ~(1<<Y_ENA_D);
 1e2:	5e 98       	cbi	0x0b, 6	; 11
	}
	if (axis_z.enable) {
 1e4:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end+0xc>
 1e8:	88 23       	and	r24, r24
 1ea:	11 f0       	breq	.+4      	; 0x1f0 <_Z13refreshOutputv+0x28>
		PORTD |= (1<<Z_ENA_D);
 1ec:	5f 9a       	sbi	0x0b, 7	; 11
 1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <_Z13refreshOutputv+0x2a>
	}
	else {
		PORTD &= ~(1<<Z_ENA_D);
 1f0:	5f 98       	cbi	0x0b, 7	; 11
	}
	
	//DIRECTION CONFIG
	if (axis_x.direction) {
 1f2:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <axis_x+0xb>
 1f6:	88 23       	and	r24, r24
 1f8:	11 f0       	breq	.+4      	; 0x1fe <_Z13refreshOutputv+0x36>
		PORTB &= ~(1<<X_DIR_D);
 1fa:	28 98       	cbi	0x05, 0	; 5
 1fc:	01 c0       	rjmp	.+2      	; 0x200 <_Z13refreshOutputv+0x38>
	}
	else {
		PORTB |= (1<<X_DIR_D);
 1fe:	28 9a       	sbi	0x05, 0	; 5
	}
	if (axis_y.direction) {
 200:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <axis_y+0xb>
 204:	88 23       	and	r24, r24
 206:	11 f0       	breq	.+4      	; 0x20c <_Z13refreshOutputv+0x44>
		PORTB &= ~(1<<Y_DIR_D);
 208:	29 98       	cbi	0x05, 1	; 5
 20a:	01 c0       	rjmp	.+2      	; 0x20e <_Z13refreshOutputv+0x46>
	}
	else {
		PORTB |= (1<<Y_DIR_D);
 20c:	29 9a       	sbi	0x05, 1	; 5
	}
	if (axis_z.direction) {
 20e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <__data_end+0xb>
 212:	88 23       	and	r24, r24
 214:	11 f0       	breq	.+4      	; 0x21a <_Z13refreshOutputv+0x52>
		PORTB &= ~(1<<Z_DIR_D);
 216:	2a 98       	cbi	0x05, 2	; 5
 218:	08 95       	ret
	}
	else {
		PORTB |= (1<<Z_DIR_D);
 21a:	2a 9a       	sbi	0x05, 2	; 5
 21c:	08 95       	ret

0000021e <__vector_14>:
	}
}
	
ISR(TIMER0_COMPA_vect) {	//	interrupt service where postprocessor will be refresh
 21e:	1f 92       	push	r1
 220:	0f 92       	push	r0
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	0f 92       	push	r0
 226:	11 24       	eor	r1, r1
 228:	2f 93       	push	r18
 22a:	3f 93       	push	r19
 22c:	4f 93       	push	r20
 22e:	5f 93       	push	r21
 230:	6f 93       	push	r22
 232:	7f 93       	push	r23
 234:	8f 93       	push	r24
 236:	9f 93       	push	r25
 238:	af 93       	push	r26
 23a:	bf 93       	push	r27
 23c:	ef 93       	push	r30
 23e:	ff 93       	push	r31
	refreshOutput();		//	here execute function which refresh outputs on MCU for EN&DIR
 240:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <_Z13refreshOutputv>
	doCLK();				//	data set on driver's outputs EN_DIR (MCU send his commands on postprocessor)
 244:	0e 94 7c 00 	call	0xf8	; 0xf8 <_Z5doCLKv>
	doCLK_PUL();			//	signal to make step, if it necessary
 248:	0e 94 87 00 	call	0x10e	; 0x10e <_Z9doCLK_PULv>
}
 24c:	ff 91       	pop	r31
 24e:	ef 91       	pop	r30
 250:	bf 91       	pop	r27
 252:	af 91       	pop	r26
 254:	9f 91       	pop	r25
 256:	8f 91       	pop	r24
 258:	7f 91       	pop	r23
 25a:	6f 91       	pop	r22
 25c:	5f 91       	pop	r21
 25e:	4f 91       	pop	r20
 260:	3f 91       	pop	r19
 262:	2f 91       	pop	r18
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <__vector_18>:

ISR(USART_RX_vect) {		//	when uart received byte. It put byte to uart_buffer
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	2f 93       	push	r18
 27a:	3f 93       	push	r19
 27c:	4f 93       	push	r20
 27e:	5f 93       	push	r21
 280:	6f 93       	push	r22
 282:	7f 93       	push	r23
 284:	8f 93       	push	r24
 286:	9f 93       	push	r25
 288:	af 93       	push	r26
 28a:	bf 93       	push	r27
 28c:	ef 93       	push	r30
 28e:	ff 93       	push	r31
	uartReceiveInInterrupt();
 290:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <_Z22uartReceiveInInterruptv>
}
 294:	ff 91       	pop	r31
 296:	ef 91       	pop	r30
 298:	bf 91       	pop	r27
 29a:	af 91       	pop	r26
 29c:	9f 91       	pop	r25
 29e:	8f 91       	pop	r24
 2a0:	7f 91       	pop	r23
 2a2:	6f 91       	pop	r22
 2a4:	5f 91       	pop	r21
 2a6:	4f 91       	pop	r20
 2a8:	3f 91       	pop	r19
 2aa:	2f 91       	pop	r18
 2ac:	0f 90       	pop	r0
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	0f 90       	pop	r0
 2b2:	1f 90       	pop	r1
 2b4:	18 95       	reti

000002b6 <main>:

int main(void)
{
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	cd b7       	in	r28, 0x3d	; 61
 2bc:	de b7       	in	r29, 0x3e	; 62
 2be:	2b 97       	sbiw	r28, 0x0b	; 11
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	f8 94       	cli
 2c4:	de bf       	out	0x3e, r29	; 62
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	cd bf       	out	0x3d, r28	; 61
	uartInit();
 2ca:	0e 94 ca 01 	call	0x394	; 0x394 <_Z8uartInitv>
	portsInit();
 2ce:	0e 94 6f 00 	call	0xde	; 0xde <_Z9portsInitv>
	
	char version[11] = "Krom v004\n";
 2d2:	8b e0       	ldi	r24, 0x0B	; 11
 2d4:	e0 e0       	ldi	r30, 0x00	; 0
 2d6:	f1 e0       	ldi	r31, 0x01	; 1
 2d8:	de 01       	movw	r26, r28
 2da:	11 96       	adiw	r26, 0x01	; 1
 2dc:	01 90       	ld	r0, Z+
 2de:	0d 92       	st	X+, r0
 2e0:	8a 95       	dec	r24
 2e2:	e1 f7       	brne	.-8      	; 0x2dc <main+0x26>
	uartTransmitString(version);
 2e4:	ce 01       	movw	r24, r28
 2e6:	01 96       	adiw	r24, 0x01	; 1
 2e8:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_Z18uartTransmitStringPc>
	
	timerInit();
 2ec:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z9timerInitv>
	int32_t getCoordinate(void) {
		return coordinate;
	}
	void findHome(void) {
		//finding home...
		coordinate = 0;
 2f0:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <axis_x>
 2f4:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <axis_x+0x1>
 2f8:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <axis_x+0x2>
 2fc:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <axis_x+0x3>
 300:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <axis_y>
 304:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <axis_y+0x1>
 308:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <axis_y+0x2>
 30c:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <axis_y+0x3>
 310:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
 314:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__data_end+0x1>
 318:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end+0x2>
 31c:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <__data_end+0x3>
 320:	ff cf       	rjmp	.-2      	; 0x320 <main+0x6a>

00000322 <_GLOBAL__sub_I_axis_x>:
	public:
	uint8_t direction;
	uint8_t enable;
	uint32_t step;		//	example: 1 step = 10um
	Axis(uint8_t nm, uint8_t en, uint8_t dir, uint16_t stp, uint8_t microstp, double val_of_div) {
		step = stp;
 322:	ee e2       	ldi	r30, 0x2E	; 46
 324:	f1 e0       	ldi	r31, 0x01	; 1
 326:	4a e0       	ldi	r20, 0x0A	; 10
 328:	50 e0       	ldi	r21, 0x00	; 0
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	70 e0       	ldi	r23, 0x00	; 0
 32e:	45 87       	std	Z+13, r20	; 0x0d
 330:	56 87       	std	Z+14, r21	; 0x0e
 332:	67 87       	std	Z+15, r22	; 0x0f
 334:	70 8b       	std	Z+16, r23	; 0x10
		microstep = microstp;
 336:	20 e2       	ldi	r18, 0x20	; 32
 338:	24 83       	std	Z+4, r18	; 0x04
		name = nm;
 33a:	15 82       	std	Z+5, r1	; 0x05
		enable = en;
 33c:	14 86       	std	Z+12, r1	; 0x0c
		direction = dir;
 33e:	13 86       	std	Z+11, r1	; 0x0b
		value_of_division = val_of_div;
 340:	8f e5       	ldi	r24, 0x5F	; 95
 342:	99 e2       	ldi	r25, 0x29	; 41
 344:	ab ec       	ldi	r26, 0xCB	; 203
 346:	ba e3       	ldi	r27, 0x3A	; 58
 348:	87 83       	std	Z+7, r24	; 0x07
 34a:	90 87       	std	Z+8, r25	; 0x08
 34c:	a1 87       	std	Z+9, r26	; 0x09
 34e:	b2 87       	std	Z+10, r27	; 0x0a
		busy = 0;
 350:	16 82       	std	Z+6, r1	; 0x06
	public:
	uint8_t direction;
	uint8_t enable;
	uint32_t step;		//	example: 1 step = 10um
	Axis(uint8_t nm, uint8_t en, uint8_t dir, uint16_t stp, uint8_t microstp, double val_of_div) {
		step = stp;
 352:	ed e1       	ldi	r30, 0x1D	; 29
 354:	f1 e0       	ldi	r31, 0x01	; 1
 356:	45 87       	std	Z+13, r20	; 0x0d
 358:	56 87       	std	Z+14, r21	; 0x0e
 35a:	67 87       	std	Z+15, r22	; 0x0f
 35c:	70 8b       	std	Z+16, r23	; 0x10
		microstep = microstp;
 35e:	24 83       	std	Z+4, r18	; 0x04
		name = nm;
 360:	31 e0       	ldi	r19, 0x01	; 1
 362:	35 83       	std	Z+5, r19	; 0x05
		enable = en;
 364:	14 86       	std	Z+12, r1	; 0x0c
		direction = dir;
 366:	13 86       	std	Z+11, r1	; 0x0b
		value_of_division = val_of_div;
 368:	87 83       	std	Z+7, r24	; 0x07
 36a:	90 87       	std	Z+8, r25	; 0x08
 36c:	a1 87       	std	Z+9, r26	; 0x09
 36e:	b2 87       	std	Z+10, r27	; 0x0a
		busy = 0;
 370:	16 82       	std	Z+6, r1	; 0x06
	public:
	uint8_t direction;
	uint8_t enable;
	uint32_t step;		//	example: 1 step = 10um
	Axis(uint8_t nm, uint8_t en, uint8_t dir, uint16_t stp, uint8_t microstp, double val_of_div) {
		step = stp;
 372:	ec e0       	ldi	r30, 0x0C	; 12
 374:	f1 e0       	ldi	r31, 0x01	; 1
 376:	45 87       	std	Z+13, r20	; 0x0d
 378:	56 87       	std	Z+14, r21	; 0x0e
 37a:	67 87       	std	Z+15, r22	; 0x0f
 37c:	70 8b       	std	Z+16, r23	; 0x10
		microstep = microstp;
 37e:	24 83       	std	Z+4, r18	; 0x04
		name = nm;
 380:	22 e0       	ldi	r18, 0x02	; 2
 382:	25 83       	std	Z+5, r18	; 0x05
		enable = en;
 384:	14 86       	std	Z+12, r1	; 0x0c
		direction = dir;
 386:	13 86       	std	Z+11, r1	; 0x0b
		value_of_division = val_of_div;
 388:	87 83       	std	Z+7, r24	; 0x07
 38a:	90 87       	std	Z+8, r25	; 0x08
 38c:	a1 87       	std	Z+9, r26	; 0x09
 38e:	b2 87       	std	Z+10, r27	; 0x0a
		busy = 0;
 390:	16 82       	std	Z+6, r1	; 0x06
 392:	08 95       	ret

00000394 <_Z8uartInitv>:
		uart_trm_buffer[u_buf_trm_cur_pos] = data_byte;
		return 0;	//	data byte was add in transmit buffer;
	}	
	++u_buf_trm_cur_pos;
	uart_trm_buffer[u_buf_trm_cur_pos] = data_byte;
}
 394:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 398:	87 e6       	ldi	r24, 0x67	; 103
 39a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 39e:	e1 ec       	ldi	r30, 0xC1	; 193
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	88 e1       	ldi	r24, 0x18	; 24
 3a4:	80 83       	st	Z, r24
 3a6:	80 81       	ld	r24, Z
 3a8:	80 68       	ori	r24, 0x80	; 128
 3aa:	80 83       	st	Z, r24
 3ac:	8e e0       	ldi	r24, 0x0E	; 14
 3ae:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 3b2:	08 95       	ret

000003b4 <_Z12uartTransmith>:
 3b4:	e0 ec       	ldi	r30, 0xC0	; 192
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	90 81       	ld	r25, Z
 3ba:	95 ff       	sbrs	r25, 5
 3bc:	fd cf       	rjmp	.-6      	; 0x3b8 <_Z12uartTransmith+0x4>
 3be:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 3c2:	08 95       	ret

000003c4 <_Z22uartReceiveInInterruptv>:
 3c4:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <u_buf_rcv_cur_pos>
 3c8:	84 31       	cpi	r24, 0x14	; 20
 3ca:	20 f0       	brcs	.+8      	; 0x3d4 <_Z22uartReceiveInInterruptv+0x10>
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <u_buf_rcv_over>
 3d2:	08 95       	ret
 3d4:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 3d8:	e8 2f       	mov	r30, r24
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	ef 5b       	subi	r30, 0xBF	; 191
 3de:	fe 4f       	sbci	r31, 0xFE	; 254
 3e0:	90 83       	st	Z, r25
 3e2:	8f 5f       	subi	r24, 0xFF	; 255
 3e4:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <u_buf_rcv_cur_pos>
 3e8:	08 95       	ret

000003ea <_Z18uartTransmitStringPc>:
//	driver


void uartTransmitString(char *m_cpStr) {
 3ea:	0f 93       	push	r16
 3ec:	1f 93       	push	r17
 3ee:	cf 93       	push	r28
 3f0:	fc 01       	movw	r30, r24
	unsigned char i = 0;
	while (m_cpStr[i] != '\0') {
 3f2:	80 81       	ld	r24, Z
 3f4:	88 23       	and	r24, r24
 3f6:	59 f0       	breq	.+22     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3f8:	8f 01       	movw	r16, r30
 3fa:	c0 e0       	ldi	r28, 0x00	; 0
		uartTransmit(m_cpStr[i]);
 3fc:	0e 94 da 01 	call	0x3b4	; 0x3b4 <_Z12uartTransmith>
		i++;
 400:	cf 5f       	subi	r28, 0xFF	; 255
//	driver


void uartTransmitString(char *m_cpStr) {
	unsigned char i = 0;
	while (m_cpStr[i] != '\0') {
 402:	f8 01       	movw	r30, r16
 404:	ec 0f       	add	r30, r28
 406:	f1 1d       	adc	r31, r1
 408:	80 81       	ld	r24, Z
 40a:	81 11       	cpse	r24, r1
 40c:	f7 cf       	rjmp	.-18     	; 0x3fc <_Z18uartTransmitStringPc+0x12>
		uartTransmit(m_cpStr[i]);
		i++;
	}
}
 40e:	cf 91       	pop	r28
 410:	1f 91       	pop	r17
 412:	0f 91       	pop	r16
 414:	08 95       	ret

00000416 <__tablejump2__>:
 416:	ee 0f       	add	r30, r30
 418:	ff 1f       	adc	r31, r31
 41a:	05 90       	lpm	r0, Z+
 41c:	f4 91       	lpm	r31, Z
 41e:	e0 2d       	mov	r30, r0
 420:	09 94       	ijmp

00000422 <_exit>:
 422:	f8 94       	cli

00000424 <__stop_program>:
 424:	ff cf       	rjmp	.-2      	; 0x424 <__stop_program>
